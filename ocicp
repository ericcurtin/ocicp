#!/usr/bin/env python3

"""
OCI registry file push/pull tool.
"""

import argparse
import subprocess
import sys
import tempfile
import os
import tarfile
import hashlib
import json
import time
import shutil
import gzip
import warnings


def sha256sum(filepath):
    """Compute SHA256 hex digest for a file."""
    h = hashlib.sha256()
    with open(filepath, "rb") as f:
        for b in iter(lambda: f.read(4096), b""):
            h.update(b)
    return h.hexdigest()


def run_cmd(cmd, check=True):
    """Run a shell command. If check=True, return its exit code."""
    result = subprocess.run(cmd, check=False)
    if check:
        return result.returncode
    return 0


def create_layer_tarball(files, tempdir):
    """
    1. Create a layer tarball from the given files as a gzip-compressed tar
    with max compression.

    Files are archived with paths relative to the current directory,
    like 'tar' would do by default.
    """
    layer_tar_path = os.path.join(tempdir, "layer.tar.gz")
    with gzip.open(layer_tar_path, "wb", compresslevel=9) as gz_out:
        # Use 'w|' to stream tar output to the gzip file
        with tarfile.open(fileobj=gz_out, mode="w|") as tar:
            for f in files:
                arcname = os.path.relpath(f, start=os.getcwd())
                tar.add(f, arcname=arcname)

    # Digest is over the *compressed* tar
    layer_digest_hex = sha256sum(layer_tar_path)
    layer_digest = "sha256:" + layer_digest_hex
    layer_size = os.path.getsize(layer_tar_path)
    # Skopeo expects the file to be named as the hex digest, no extension.
    final_layer_path = os.path.join(tempdir, layer_digest_hex)
    shutil.move(layer_tar_path, final_layer_path)
    return layer_digest, layer_size, final_layer_path


def create_config(layer_digest, tempdir):
    """
    2. Create a minimal config (Docker image config, V2 Schema 2).
    """
    created = time.strftime("%Y-%m-%dT%H:%M:%S.000000000Z", time.gmtime())
    config = {
        "created": created,
        "architecture": "amd64",
        "os": "linux",
        "config": {},
        "rootfs": {"type": "layers", "diff_ids": [layer_digest]},
        "history": [{"created": created, "created_by": "ocicp"}],
    }
    config_json_path = os.path.join(tempdir, "config.json")
    with open(config_json_path, "w", encoding="utf-8") as f:
        json.dump(config, f, separators=(",", ":"))
    config_digest_hex = sha256sum(config_json_path)
    config_digest = "sha256:" + config_digest_hex
    config_size = os.path.getsize(config_json_path)
    # Name config as its digest too
    final_config_path = os.path.join(tempdir, config_digest_hex)
    shutil.move(config_json_path, final_config_path)
    return config_digest, config_size, final_config_path


def write_manifest_object(
    config_digest, config_size, layer_digest, layer_size, tempdir
):
    """
    3. Write manifest as an OBJECT (not an array).
    """
    manifest = {
        "schemaVersion": 2,
        "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
        "config": {
            "mediaType": "application/vnd.docker.container.image.v1+json",
            "size": config_size,
            "digest": config_digest,
        },
        "layers": [
            {
                "mediaType": (
                    "application/vnd.docker.image.rootfs.diff.tar.gzip"
                ),
                "size": layer_size,
                "digest": layer_digest,
            }
        ],
    }
    manifest_json = os.path.join(tempdir, "manifest.json")
    with open(manifest_json, "w", encoding="utf-8") as f:
        json.dump(manifest, f, separators=(",", ":"))
    return manifest_json


def make_dir_image(files, tempdir):
    """
    Bundle files into a single layer, config, and manifest in tempdir.
    """
    layer_digest, layer_size, final_layer_path = create_layer_tarball(
        files, tempdir
    )
    config_digest, config_size, final_config_path = create_config(
        layer_digest, tempdir
    )
    manifest_json = write_manifest_object(
        config_digest, config_size, layer_digest, layer_size, tempdir
    )
    return {
        "layer": final_layer_path,
        "config": final_config_path,
        "manifest": manifest_json,
    }


def push(image_ref, files):
    """
    Push files as a new OCI image to the specified image reference.
    """
    with tempfile.TemporaryDirectory() as tempdir:
        make_dir_image(files, tempdir)
        ret = run_cmd(
            ["skopeo", "copy", f"dir:{tempdir}", f"docker://{image_ref}"]
        )
        return ret


def pull(image_ref):
    """
    Pull files from the specified OCI image reference and extract them
    into the current directory.
    """
    with tempfile.TemporaryDirectory() as tempdir:
        ret = run_cmd(
            ["skopeo", "copy", f"docker://{image_ref}", f"dir:{tempdir}"]
        )
        if ret:
            return ret

        manifest_json = os.path.join(tempdir, "manifest.json")
        with open(manifest_json, encoding="utf-8") as f:
            manifest = json.load(f)
        for layer in manifest["layers"]:
            layer_digest = layer["digest"].split(":")[1]
            layer_tar = os.path.join(tempdir, layer_digest)
            if os.path.exists(layer_tar):
                # extract gzip-compressed tar layer
                with gzip.open(layer_tar, "rb") as gzfile:
                    with tarfile.open(fileobj=gzfile, mode="r:") as tarf:
                        warnings.simplefilter("ignore", DeprecationWarning)
                        tarf.extractall(".")
        return 0


def main():
    """
    Entry point for the CLI.
    """
    parser = argparse.ArgumentParser(
        description="OCI registry file push/pull tool."
    )
    subparsers = parser.add_subparsers(dest="command", required=True)

    push_parser = subparsers.add_parser("push", help="Push files to image")
    push_parser.add_argument(
        "image", help="OCI image reference (e.g. quay.io/repo/image)"
    )
    push_parser.add_argument("file", nargs="+", help="Files to push")

    pull_parser = subparsers.add_parser("pull", help="Pull files from image")
    pull_parser.add_argument(
        "image", help="OCI image reference (e.g. quay.io/repo/image)"
    )

    args = parser.parse_args()
    if args.command == "push":
        return push(args.image, args.file)
    if args.command == "pull":
        return pull(args.image)
    parser.print_help()
    return 0


if __name__ == "__main__":
    sys.exit(main())
